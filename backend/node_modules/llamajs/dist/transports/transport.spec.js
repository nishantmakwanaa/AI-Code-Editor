"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const transport_1 = require("./transport");
const severityLevels_1 = require("../severityLevels/severityLevels");
class TransportMock extends transport_1.Transport {
    constructor() {
        super(...arguments);
        this.isPassed = false;
    }
    pass(message, messageConfig) {
        this.isPassed = true;
    }
}
const validMessage = {
    name: 'valid',
    severity: severityLevels_1.syslogSeverityLevels[6],
};
const invalidMessage = {
    name: 'invalid',
    severity: severityLevels_1.IbmTivoliSeverityLevels[0],
};
describe('Transport Module', function () {
    describe('#send()', function () {
        let transportMock;
        context('When all values are valid', function () {
            beforeEach(function () {
                transportMock = new TransportMock();
            });
            it('Should send the message', function () {
                chai_1.expect(transportMock.isPassed).to.be.false;
                transportMock.send(validMessage);
                chai_1.expect(transportMock.isPassed).to.be.true;
            });
        });
        context('When values are invalid', function () {
            beforeEach(function () {
                transportMock = new TransportMock();
            });
            it('Should not send the message if the severity is not compatible', function () {
                chai_1.expect(transportMock.isPassed).to.be.false;
                transportMock.send(invalidMessage);
                chai_1.expect(transportMock.isPassed).to.be.false;
            });
        });
    });
});
//# sourceMappingURL=transport.spec.js.map